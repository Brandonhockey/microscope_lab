import cv2
import torchvision.transforms as transforms
from PIL import Image, ImageChops
import torch
import numpy as np
import matplotlib.pyplot as plt

# Open the camera
cap = cv2.VideoCapture(0)

# Capture an image
ret, frame = cap.read()

# Save the image as a file
cv2.imwrite('image.jpg', frame)

# Release the camera
cap.release()

# Load the image
image_path = 'image.jpg'
image = Image.open(image_path)

# Define the transformation pipeline to preprocess the image
transform = transforms.Compose([
    transforms.ToTensor(),  # Convert PIL image to PyTorch tensor
])

# Apply the transformation to the image
tensor_image = transform(image)

# Filter the tensor
# Apply Gaussian blur filter with kernel size 5x5
filtered_image = cv2.GaussianBlur(tensor_image.permute(1, 2, 0).numpy(), (5, 5), 0)

# Convert the filtered image back to PIL Image
filtered_image = Image.fromarray(np.uint8(filtered_image))

# Calculate the difference image
difference_image = ImageChops.subtract(image, filtered_image)

# Display images side by side
fig, axs = plt.subplots(1, 3)
axs[0].imshow(image)
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(filtered_image)
axs[1].set_title('Filtered Image')
axs[1].axis('off')

axs[2].imshow(difference_image)
axs[2].set_title('Difference Image')
axs[2].axis('off')

plt.show()
