import cv2
import torchvision.transforms as transforms
from PIL import Image, ImageChops
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.nn.functional as F

# Define the U-Net model
class UNet(nn.Module):
    def __init__(self):
        super(UNet, self).__init__()
        # Define the architecture of U-Net

        # ...

        # Example architecture:
        self.conv1 = nn.Conv2d(3, 64, 3, padding=1)
        self.conv2 = nn.Conv2d(64, 64, 3, padding=1)
        self.pool = nn.MaxPool2d(2)
        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.conv3 = nn.Conv2d(64, 1, 1)

    def forward(self, x):
        # Define the forward pass of U-Net

        # ...

        # Example forward pass:
        x = F.relu(self.conv1(x))
        x = self.pool(x)
        x = F.relu(self.conv2(x))
        x = self.up(x)
        x = self.conv3(x)
        return x

# Open the camera
cap = cv2.VideoCapture(0)

# Capture an image
ret, frame = cap.read()

# Release the camera
cap.release()

# Save the image as a file
cv2.imwrite('image.jpg', frame)

# Load the image
image_path = 'image.jpg'
image = Image.open(image_path)

# Convert the PIL image to a numpy array
image_np = np.array(image)

# Apply a filter to the image (e.g., using a Gaussian blur)
filtered_np_image = cv2.GaussianBlur(image_np, (5, 5), 0)

# Convert the filtered image back to PIL format
filtered_pil_image = Image.fromarray(filtered_np_image)

# Create an instance of the U-Net model
model = UNet()

# Perform image segmentation
input_tensor = transforms.ToTensor()(image).unsqueeze(0)
segmentation_map = model(input_tensor)

# Convert the segmentation map to PIL format
segmentation_map_pil = transforms.ToPILImage()(segmentation_map.squeeze())

# Display images side by side
fig, axs = plt.subplots(1, 4)
axs[0].imshow(image)
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(filtered_pil_image)
axs[1].set_title('Filtered Image')
axs[1].axis('off')

axs[2].imshow(segmentation_map_pil, cmap='gray')
axs[2].set_title('Segmentation Map')
axs[2].axis('off')

axs[3].imshow(image)
axs[3].imshow(segmentation_map_pil, alpha=0.4, cmap='jet')
axs[3].set_title('Segmented Image')
axs[3].axis('off')

plt.show()
