import cv2
import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image

# Load the pretrained AlexNet model
alexnet = models.alexnet(pretrained=True)

# Define the transformation pipeline
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Function to capture an image from the webcam
def capture_image():
    capture = cv2.VideoCapture(0)
    while True:
        ret, frame = capture.read()
        cv2.imshow('Webcam', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            cv2.imwrite('image.jpg', frame)
            break

    capture.release()
    cv2.destroyAllWindows()

# Capture an image from the webcam
capture_image()

# Load the captured image
image = Image.open('image.jpg')

# Apply the transformations
input_tensor = transform(image)
input_batch = input_tensor.unsqueeze(0)

# Set the model to evaluation mode
alexnet.eval()

# Make predictions
with torch.no_grad():
    output = alexnet(input_batch)

# Get the predicted class
_, predicted_idx = torch.max(output, 1)

print("Predicted class index:", predicted_idx.item())
